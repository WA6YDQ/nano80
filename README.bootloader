   I've written a simple boot loader for the nano80.
It's called bl.asm and can be assembled with the asm80 
program (included here).

The output of bl.asm is:

7FC0  21 00 00 AF D3 00 DB 02 FE 00 CA C6 7F DB 01 47
7FD0  DB 01 4F DB 01 D3 00 77 23 0B AF B9 C2 D3 7F B8
7FE0  C2 D3 7F AF D3 00 76 00 00 00 00 00 00 00 00 00

Load this into memory at 0x7FC0 then jump to address 0x0000
and load in the following 3 bytes:

0000 C3 C0 7F

This is a jmp 7FC0 command.
With both loaded in, press reset. The nano80 computer will execute 
the jump instruction and start the boot loader.

(One advantage of using FRAM is the program will stay in memory after 
power is removed).

The bootloader will test the serial port until bytes are available.
When bytes start coming in, it will store the first 2 bytes into register BC.
This is the length in bytes of the program to load into memory. The bootloader
will use this count to know when to stop loading.

The bootloader assumes that the loaded program will start at address 0x0000.
The assembler assumes this as well as the output loads 00 preceeding the actual 
program (if the assembled program actually starts elsewhere).

   The next step is to create a bootloader-ready file from the .com file
created by the assembler asm80.

This is done with the program com2bl (included here).
com2bl (com to bootloader) reads the .com filesize and creates a file
with the filesize as the first 2 bytes, and the rest of the .com file attached 
after.

To build com2bl use the following:

cc -o com2bl com2bl.c

With a suitable 8080 assembler program run:

./com2bl file.com file.hex

The file file.hex will be the program to be loaded into memory by the bootloader
running on the nano80.

Use a terminal program (I use minicom) send the file file.hex as an ascii upload.
The LED's on port 0 of the nano80 will flash as the file is loaded. When the file is
finished loading, the LED's will extinguish and the HALT led will light.

At this point, your program is loaded starting at 0x0000. Press the reset button and your
program will start running.

-------------------

Here is an example:

pi@pi4:~/8080 $ asm80 cylon.asm

Assembly Complete.
pi@pi4:~/8080 $ ./com2bl cylon.com cylon.hex
Filesize is of cylon.com is 79 bytes
File written
pi@pi4:~/8080 $ 

Now start the bootloader and start minicom.
Press ctrl-A S and scroll down to select 'ascii'
You will be presented with a list of files. Scroll down and select cylon.hex
The bootloader will load the file, the LED's will flash and when the load is
completed the LED's will extinguish and the HALT LED will light up.

Press the 'reset' button on the computer (not on the arduino nano).
The program cylon will start running and the led's will flash back and forth.

 

